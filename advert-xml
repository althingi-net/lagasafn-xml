#!/usr/bin/env python3
import click
from datetime import datetime
from datetime import timedelta
from lagasafn.advert.commands import (
    apply_intents_from_advert,
    convert_adverts,
    create_index,
)
from lagasafn.advert.remote import update_local_adverts
from lagasafn.constants import CURRENT_PARLIAMENT_VERSION
from lagasafn.models import LawManager
from lagasafn.models.advert import AdvertManager


def help():
    ctx = click.get_current_context()
    click.echo(ctx.get_help())
    quit(2)


@click.command()
@click.option(
    "--full",
    is_flag=True,
    help="Runs --retrieve, --convert and --make-index, in that order.",
)
@click.option(
    "--retrieve",
    is_flag=True,
    help="Retrieves and saves remote advers on the local disk in a cleaned XML format.",
)
@click.option(
    "--convert",
    is_flag=True,
    help="Converts local adverts into their corresponding XML files.",
)
@click.option("--make-index", is_flag=True, help="Create index of adverts.")
@click.option(
    "--apply", is_flag=True, help="Apply intents from adverts to their target laws."
)
@click.option(
    "--codex-version",
    default=None,
    help="Codex version to use when applying intents or comparing (e.g., '156a'). Defaults to CURRENT_PARLIAMENT_VERSION.",
)
@click.argument("advert_identifiers", nargs=-1)
def main(
    full: bool,
    retrieve: bool,
    convert: bool,
    make_index: bool,
    apply: bool,
    codex_version: str | None,
    advert_identifiers: tuple,
):

    # We don't like tuples around here.
    identifiers: list[str] = [i for i in advert_identifiers]

    # Make sure that the parameters make sense.
    if not any([full, retrieve, convert, make_index, apply]):
        help()

    # Expand the special "--full" option.
    if full:
        retrieve = True
        convert = True
        make_index = True

    # We'll handle adverts that were published after the currently selected
    # codex version was released.
    law_index = LawManager.index(CURRENT_PARLIAMENT_VERSION)
    from_date = law_index.info.date_to + timedelta(days=1)
    to_date = datetime.now()

    if retrieve:
        update_local_adverts(from_date, to_date)
    if convert:
        convert_adverts(identifiers)
    if make_index:
        create_index()
    if apply:
        if identifiers:
            # Apply intents from specific adverts
            for advert_id in identifiers:
                apply_intents_from_advert(advert_id)
        else:
            # Apply intents from all adverts for the selected codex version
            codex_version = codex_version or CURRENT_PARLIAMENT_VERSION
            index = AdvertManager.index(codex_version)
            for advert in index.adverts:
                apply_intents_from_advert(advert.identifier)


if __name__ == "__main__":
    main()
